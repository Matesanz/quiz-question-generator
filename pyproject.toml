[tool.poetry]
name = "quiz-question-generator"
version = "0.3.2"
description = "Quiz Question Generator API and UI"
authors = ["Andr√©s Matesanz <matesanz.cuadrado@sngular.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = ">=3.12,<4"
aisuite = {version = "~0.1.10", extras = ["openai"]}
fastapi = {version = "~0.115", extras = ["standard"]}
pydantic = "^2.10.6"
pydantic-settings = "^2.8.1"
docstring-parser = "~0.16"
loguru = "~0.7.3"

[tool.poetry.group.dev.dependencies]
ruff = "^0.9.9"
pre-commit = "^4.1.0"
pylint = "^3.3.4"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.4"
assertpy = "^1.1"
pytest-mock = "^3.14.0"
pytest-env = "^1.1.5"

[tool.poetry.group.release.dependencies]
python-semantic-release = "^9.21.0"


[tool.poetry.group.ui.dependencies]
streamlit = "~1.42.2"
requests = "^2.32.3"

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version",]
version_variables = ["app/__init__.py:__version__",]
commit_message = "üîñ v{version}\n\nAutomatically generated by python-semantic-release [skip ci]"
tag_format = "{version}"
commit_parser = "emoji"
ignore_token_for_push = true
upload_to_vcs_release = false

[tool.semantic_release.commit_parser_options]
major_tags = [
    "üí•"]  # breaking change
minor_tags = [
    "‚ú®",  # feature
    "üöë",  # hotfix
    "üéâ",  # begin project
    "üß™"]  # test
patch_tags = [
    "üêõ",  # bugfix,
    "ü©π",  # simple fix
    "üîí",  # security
    "üìù",  # docs
    "‚ö°Ô∏è",  # performance
    "üë∑"]  # ci/cd

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
extend_skip_glob = ["docs/*", "notebooks/*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
env = [
    "OPENAI_API_KEY=123456789",
]

[tool.pylint]
    [tool.pylint.main]
    load-plugins=[
        "pylint.extensions.check_elif",
        "pylint.extensions.bad_builtin",
        "pylint.extensions.docparams",
        "pylint.extensions.for_any_all",
        "pylint.extensions.set_membership",
        "pylint.extensions.code_style",
        "pylint.extensions.overlapping_exceptions",
        "pylint.extensions.typing",
        "pylint.extensions.redefined_variable_type",
        "pylint.extensions.comparison_placement"]

    [tool.pylint.messages_control]
    disable = [
        "too-few-public-methods",
        "too-many-arguments",
        "consider-using-assignment-expr",
        "line-too-long",
        ]

[tool.ruff]
line-length = 120
exclude = ["docs/*", "notebooks/*", "tests/*"]

[tool.ruff.lint]
select = [
    # isort
    "I",
    # flake8-bugbear
    "B",
    # flake8-use-pathlib
    "PTH",
    # flake8-return
    "RET",
    # pycodestyle
    "E", "W",
    # pydocstyle
    "D",
    # pyflakes
    "F",
    # pylint
    "PL",
    # ruff
    "RUF",
]

extend-select = [
    # flake8-annotations
    "ANN001",
    "ANN201",
    "ANN202",
    "ANN204",
    "ANN205",
    "ANN206",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
